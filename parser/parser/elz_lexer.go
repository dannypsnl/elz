// Generated from Elz.g4 by ANTLR 4.7.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 26, 172,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 4, 29, 9, 29, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 12, 3, 12,
	3, 12, 3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 17,
	3, 17, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 21, 6, 21, 121, 10,
	21, 13, 21, 14, 21, 122, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 3, 22, 7, 22,
	131, 10, 22, 12, 22, 14, 22, 134, 11, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3,
	23, 3, 23, 7, 23, 142, 10, 23, 12, 23, 14, 23, 145, 11, 23, 3, 24, 3, 24,
	3, 25, 3, 25, 5, 25, 151, 10, 25, 3, 26, 3, 26, 7, 26, 155, 10, 26, 12,
	26, 14, 26, 158, 11, 26, 3, 27, 3, 27, 3, 28, 3, 28, 3, 29, 3, 29, 7, 29,
	166, 10, 29, 12, 29, 14, 29, 169, 11, 29, 3, 29, 3, 29, 4, 132, 167, 2,
	30, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12,
	23, 13, 25, 14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21,
	41, 22, 43, 23, 45, 24, 47, 2, 49, 2, 51, 25, 53, 2, 55, 2, 57, 26, 3,
	2, 6, 5, 2, 11, 12, 15, 15, 34, 34, 5, 2, 67, 92, 97, 97, 99, 124, 3, 2,
	50, 59, 4, 2, 48, 48, 50, 59, 2, 173, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2,
	2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2,
	2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3,
	2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29,
	3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2,
	37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2, 2, 2,
	2, 45, 3, 2, 2, 2, 2, 51, 3, 2, 2, 2, 2, 57, 3, 2, 2, 2, 3, 59, 3, 2, 2,
	2, 5, 66, 3, 2, 2, 2, 7, 68, 3, 2, 2, 2, 9, 70, 3, 2, 2, 2, 11, 72, 3,
	2, 2, 2, 13, 74, 3, 2, 2, 2, 15, 76, 3, 2, 2, 2, 17, 80, 3, 2, 2, 2, 19,
	84, 3, 2, 2, 2, 21, 86, 3, 2, 2, 2, 23, 89, 3, 2, 2, 2, 25, 92, 3, 2, 2,
	2, 27, 94, 3, 2, 2, 2, 29, 96, 3, 2, 2, 2, 31, 105, 3, 2, 2, 2, 33, 111,
	3, 2, 2, 2, 35, 113, 3, 2, 2, 2, 37, 115, 3, 2, 2, 2, 39, 117, 3, 2, 2,
	2, 41, 120, 3, 2, 2, 2, 43, 126, 3, 2, 2, 2, 45, 139, 3, 2, 2, 2, 47, 146,
	3, 2, 2, 2, 49, 150, 3, 2, 2, 2, 51, 152, 3, 2, 2, 2, 53, 159, 3, 2, 2,
	2, 55, 161, 3, 2, 2, 2, 57, 163, 3, 2, 2, 2, 59, 60, 7, 107, 2, 2, 60,
	61, 7, 111, 2, 2, 61, 62, 7, 114, 2, 2, 62, 63, 7, 113, 2, 2, 63, 64, 7,
	116, 2, 2, 64, 65, 7, 118, 2, 2, 65, 4, 3, 2, 2, 2, 66, 67, 7, 63, 2, 2,
	67, 6, 3, 2, 2, 2, 68, 69, 7, 46, 2, 2, 69, 8, 3, 2, 2, 2, 70, 71, 7, 42,
	2, 2, 71, 10, 3, 2, 2, 2, 72, 73, 7, 43, 2, 2, 73, 12, 3, 2, 2, 2, 74,
	75, 7, 45, 2, 2, 75, 14, 3, 2, 2, 2, 76, 77, 7, 110, 2, 2, 77, 78, 7, 103,
	2, 2, 78, 79, 7, 118, 2, 2, 79, 16, 3, 2, 2, 2, 80, 81, 7, 111, 2, 2, 81,
	82, 7, 119, 2, 2, 82, 83, 7, 118, 2, 2, 83, 18, 3, 2, 2, 2, 84, 85, 7,
	60, 2, 2, 85, 20, 3, 2, 2, 2, 86, 87, 7, 104, 2, 2, 87, 88, 7, 112, 2,
	2, 88, 22, 3, 2, 2, 2, 89, 90, 7, 47, 2, 2, 90, 91, 7, 64, 2, 2, 91, 24,
	3, 2, 2, 2, 92, 93, 7, 125, 2, 2, 93, 26, 3, 2, 2, 2, 94, 95, 7, 127, 2,
	2, 95, 28, 3, 2, 2, 2, 96, 97, 7, 118, 2, 2, 97, 98, 7, 123, 2, 2, 98,
	99, 7, 114, 2, 2, 99, 100, 7, 103, 2, 2, 100, 101, 7, 82, 2, 2, 101, 102,
	7, 99, 2, 2, 102, 103, 7, 117, 2, 2, 103, 104, 7, 117, 2, 2, 104, 30, 3,
	2, 2, 2, 105, 106, 7, 118, 2, 2, 106, 107, 7, 116, 2, 2, 107, 108, 7, 99,
	2, 2, 108, 109, 7, 107, 2, 2, 109, 110, 7, 118, 2, 2, 110, 32, 3, 2, 2,
	2, 111, 112, 7, 96, 2, 2, 112, 34, 3, 2, 2, 2, 113, 114, 7, 44, 2, 2, 114,
	36, 3, 2, 2, 2, 115, 116, 7, 49, 2, 2, 116, 38, 3, 2, 2, 2, 117, 118, 7,
	47, 2, 2, 118, 40, 3, 2, 2, 2, 119, 121, 9, 2, 2, 2, 120, 119, 3, 2, 2,
	2, 121, 122, 3, 2, 2, 2, 122, 120, 3, 2, 2, 2, 122, 123, 3, 2, 2, 2, 123,
	124, 3, 2, 2, 2, 124, 125, 8, 21, 2, 2, 125, 42, 3, 2, 2, 2, 126, 127,
	7, 49, 2, 2, 127, 128, 7, 49, 2, 2, 128, 132, 3, 2, 2, 2, 129, 131, 11,
	2, 2, 2, 130, 129, 3, 2, 2, 2, 131, 134, 3, 2, 2, 2, 132, 133, 3, 2, 2,
	2, 132, 130, 3, 2, 2, 2, 133, 135, 3, 2, 2, 2, 134, 132, 3, 2, 2, 2, 135,
	136, 7, 12, 2, 2, 136, 137, 3, 2, 2, 2, 137, 138, 8, 22, 2, 2, 138, 44,
	3, 2, 2, 2, 139, 143, 5, 47, 24, 2, 140, 142, 5, 49, 25, 2, 141, 140, 3,
	2, 2, 2, 142, 145, 3, 2, 2, 2, 143, 141, 3, 2, 2, 2, 143, 144, 3, 2, 2,
	2, 144, 46, 3, 2, 2, 2, 145, 143, 3, 2, 2, 2, 146, 147, 9, 3, 2, 2, 147,
	48, 3, 2, 2, 2, 148, 151, 9, 4, 2, 2, 149, 151, 5, 47, 24, 2, 150, 148,
	3, 2, 2, 2, 150, 149, 3, 2, 2, 2, 151, 50, 3, 2, 2, 2, 152, 156, 5, 53,
	27, 2, 153, 155, 5, 55, 28, 2, 154, 153, 3, 2, 2, 2, 155, 158, 3, 2, 2,
	2, 156, 154, 3, 2, 2, 2, 156, 157, 3, 2, 2, 2, 157, 52, 3, 2, 2, 2, 158,
	156, 3, 2, 2, 2, 159, 160, 9, 5, 2, 2, 160, 54, 3, 2, 2, 2, 161, 162, 9,
	4, 2, 2, 162, 56, 3, 2, 2, 2, 163, 167, 7, 36, 2, 2, 164, 166, 11, 2, 2,
	2, 165, 164, 3, 2, 2, 2, 166, 169, 3, 2, 2, 2, 167, 168, 3, 2, 2, 2, 167,
	165, 3, 2, 2, 2, 168, 170, 3, 2, 2, 2, 169, 167, 3, 2, 2, 2, 170, 171,
	7, 36, 2, 2, 171, 58, 3, 2, 2, 2, 9, 2, 122, 132, 143, 150, 156, 167, 3,
	2, 3, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'import'", "'='", "','", "'('", "')'", "'+'", "'let'", "'mut'", "':'",
	"'fn'", "'->'", "'{'", "'}'", "'typePass'", "'trait'", "'^'", "'*'", "'/'",
	"'-'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "WS", "COMMENT", "ID", "NUM", "String",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
	"T__17", "T__18", "WS", "COMMENT", "ID", "StartLetter", "Letter", "NUM",
	"StartDigit", "Digit", "String",
}

type ElzLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewElzLexer(input antlr.CharStream) *ElzLexer {

	l := new(ElzLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Elz.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ElzLexer tokens.
const (
	ElzLexerT__0    = 1
	ElzLexerT__1    = 2
	ElzLexerT__2    = 3
	ElzLexerT__3    = 4
	ElzLexerT__4    = 5
	ElzLexerT__5    = 6
	ElzLexerT__6    = 7
	ElzLexerT__7    = 8
	ElzLexerT__8    = 9
	ElzLexerT__9    = 10
	ElzLexerT__10   = 11
	ElzLexerT__11   = 12
	ElzLexerT__12   = 13
	ElzLexerT__13   = 14
	ElzLexerT__14   = 15
	ElzLexerT__15   = 16
	ElzLexerT__16   = 17
	ElzLexerT__17   = 18
	ElzLexerT__18   = 19
	ElzLexerWS      = 20
	ElzLexerCOMMENT = 21
	ElzLexerID      = 22
	ElzLexerNUM     = 23
	ElzLexerString  = 24
)

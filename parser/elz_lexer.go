// Generated from Elz.g4 by ANTLR 4.7.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 33, 212,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 4, 29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33,
	4, 34, 9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 11, 3, 11, 3, 12, 3, 12,
	3, 13, 3, 13, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	16, 3, 16, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19,
	3, 19, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 22, 3,
	22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 23, 3, 23, 3, 24, 3, 24, 3, 25, 3, 25,
	3, 26, 3, 26, 3, 27, 3, 27, 3, 28, 6, 28, 161, 10, 28, 13, 28, 14, 28,
	162, 3, 28, 3, 28, 3, 29, 3, 29, 3, 29, 3, 29, 7, 29, 171, 10, 29, 12,
	29, 14, 29, 174, 11, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 30, 3, 30, 7, 30,
	182, 10, 30, 12, 30, 14, 30, 185, 11, 30, 3, 31, 3, 31, 3, 32, 3, 32, 5,
	32, 191, 10, 32, 3, 33, 3, 33, 7, 33, 195, 10, 33, 12, 33, 14, 33, 198,
	11, 33, 3, 34, 3, 34, 3, 35, 3, 35, 3, 36, 3, 36, 7, 36, 206, 10, 36, 12,
	36, 14, 36, 209, 11, 36, 3, 36, 3, 36, 4, 172, 207, 2, 37, 3, 3, 5, 4,
	7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14,
	27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 22, 43, 23,
	45, 24, 47, 25, 49, 26, 51, 27, 53, 28, 55, 29, 57, 30, 59, 31, 61, 2,
	63, 2, 65, 32, 67, 2, 69, 2, 71, 33, 3, 2, 6, 5, 2, 11, 12, 15, 15, 34,
	34, 5, 2, 67, 92, 97, 97, 99, 124, 3, 2, 50, 59, 4, 2, 48, 48, 50, 59,
	2, 213, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3,
	2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17,
	3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2,
	25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2,
	2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2,
	2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2, 2, 2, 2, 45, 3, 2, 2, 2, 2, 47, 3, 2,
	2, 2, 2, 49, 3, 2, 2, 2, 2, 51, 3, 2, 2, 2, 2, 53, 3, 2, 2, 2, 2, 55, 3,
	2, 2, 2, 2, 57, 3, 2, 2, 2, 2, 59, 3, 2, 2, 2, 2, 65, 3, 2, 2, 2, 2, 71,
	3, 2, 2, 2, 3, 73, 3, 2, 2, 2, 5, 80, 3, 2, 2, 2, 7, 82, 3, 2, 2, 2, 9,
	84, 3, 2, 2, 2, 11, 91, 3, 2, 2, 2, 13, 96, 3, 2, 2, 2, 15, 98, 3, 2, 2,
	2, 17, 100, 3, 2, 2, 2, 19, 106, 3, 2, 2, 2, 21, 109, 3, 2, 2, 2, 23, 111,
	3, 2, 2, 2, 25, 113, 3, 2, 2, 2, 27, 115, 3, 2, 2, 2, 29, 118, 3, 2, 2,
	2, 31, 123, 3, 2, 2, 2, 33, 125, 3, 2, 2, 2, 35, 127, 3, 2, 2, 2, 37, 131,
	3, 2, 2, 2, 39, 135, 3, 2, 2, 2, 41, 138, 3, 2, 2, 2, 43, 143, 3, 2, 2,
	2, 45, 149, 3, 2, 2, 2, 47, 151, 3, 2, 2, 2, 49, 153, 3, 2, 2, 2, 51, 155,
	3, 2, 2, 2, 53, 157, 3, 2, 2, 2, 55, 160, 3, 2, 2, 2, 57, 166, 3, 2, 2,
	2, 59, 179, 3, 2, 2, 2, 61, 186, 3, 2, 2, 2, 63, 190, 3, 2, 2, 2, 65, 192,
	3, 2, 2, 2, 67, 199, 3, 2, 2, 2, 69, 201, 3, 2, 2, 2, 71, 203, 3, 2, 2,
	2, 73, 74, 7, 107, 2, 2, 74, 75, 7, 111, 2, 2, 75, 76, 7, 114, 2, 2, 76,
	77, 7, 113, 2, 2, 77, 78, 7, 116, 2, 2, 78, 79, 7, 118, 2, 2, 79, 4, 3,
	2, 2, 2, 80, 81, 7, 42, 2, 2, 81, 6, 3, 2, 2, 2, 82, 83, 7, 43, 2, 2, 83,
	8, 3, 2, 2, 2, 84, 85, 7, 116, 2, 2, 85, 86, 7, 103, 2, 2, 86, 87, 7, 118,
	2, 2, 87, 88, 7, 119, 2, 2, 88, 89, 7, 116, 2, 2, 89, 90, 7, 112, 2, 2,
	90, 10, 3, 2, 2, 2, 91, 92, 7, 110, 2, 2, 92, 93, 7, 113, 2, 2, 93, 94,
	7, 113, 2, 2, 94, 95, 7, 114, 2, 2, 95, 12, 3, 2, 2, 2, 96, 97, 7, 125,
	2, 2, 97, 14, 3, 2, 2, 2, 98, 99, 7, 127, 2, 2, 99, 16, 3, 2, 2, 2, 100,
	101, 7, 111, 2, 2, 101, 102, 7, 99, 2, 2, 102, 103, 7, 118, 2, 2, 103,
	104, 7, 101, 2, 2, 104, 105, 7, 106, 2, 2, 105, 18, 3, 2, 2, 2, 106, 107,
	7, 63, 2, 2, 107, 108, 7, 64, 2, 2, 108, 20, 3, 2, 2, 2, 109, 110, 7, 46,
	2, 2, 110, 22, 3, 2, 2, 2, 111, 112, 7, 63, 2, 2, 112, 24, 3, 2, 2, 2,
	113, 114, 7, 66, 2, 2, 114, 26, 3, 2, 2, 2, 115, 116, 7, 47, 2, 2, 116,
	117, 7, 64, 2, 2, 117, 28, 3, 2, 2, 2, 118, 119, 7, 107, 2, 2, 119, 120,
	7, 111, 2, 2, 120, 121, 7, 114, 2, 2, 121, 122, 7, 110, 2, 2, 122, 30,
	3, 2, 2, 2, 123, 124, 7, 60, 2, 2, 124, 32, 3, 2, 2, 2, 125, 126, 7, 45,
	2, 2, 126, 34, 3, 2, 2, 2, 127, 128, 7, 110, 2, 2, 128, 129, 7, 103, 2,
	2, 129, 130, 7, 118, 2, 2, 130, 36, 3, 2, 2, 2, 131, 132, 7, 111, 2, 2,
	132, 133, 7, 119, 2, 2, 133, 134, 7, 118, 2, 2, 134, 38, 3, 2, 2, 2, 135,
	136, 7, 104, 2, 2, 136, 137, 7, 112, 2, 2, 137, 40, 3, 2, 2, 2, 138, 139,
	7, 118, 2, 2, 139, 140, 7, 123, 2, 2, 140, 141, 7, 114, 2, 2, 141, 142,
	7, 103, 2, 2, 142, 42, 3, 2, 2, 2, 143, 144, 7, 118, 2, 2, 144, 145, 7,
	116, 2, 2, 145, 146, 7, 99, 2, 2, 146, 147, 7, 107, 2, 2, 147, 148, 7,
	118, 2, 2, 148, 44, 3, 2, 2, 2, 149, 150, 7, 96, 2, 2, 150, 46, 3, 2, 2,
	2, 151, 152, 7, 44, 2, 2, 152, 48, 3, 2, 2, 2, 153, 154, 7, 49, 2, 2, 154,
	50, 3, 2, 2, 2, 155, 156, 7, 47, 2, 2, 156, 52, 3, 2, 2, 2, 157, 158, 7,
	65, 2, 2, 158, 54, 3, 2, 2, 2, 159, 161, 9, 2, 2, 2, 160, 159, 3, 2, 2,
	2, 161, 162, 3, 2, 2, 2, 162, 160, 3, 2, 2, 2, 162, 163, 3, 2, 2, 2, 163,
	164, 3, 2, 2, 2, 164, 165, 8, 28, 2, 2, 165, 56, 3, 2, 2, 2, 166, 167,
	7, 49, 2, 2, 167, 168, 7, 49, 2, 2, 168, 172, 3, 2, 2, 2, 169, 171, 11,
	2, 2, 2, 170, 169, 3, 2, 2, 2, 171, 174, 3, 2, 2, 2, 172, 173, 3, 2, 2,
	2, 172, 170, 3, 2, 2, 2, 173, 175, 3, 2, 2, 2, 174, 172, 3, 2, 2, 2, 175,
	176, 7, 12, 2, 2, 176, 177, 3, 2, 2, 2, 177, 178, 8, 29, 2, 2, 178, 58,
	3, 2, 2, 2, 179, 183, 5, 61, 31, 2, 180, 182, 5, 63, 32, 2, 181, 180, 3,
	2, 2, 2, 182, 185, 3, 2, 2, 2, 183, 181, 3, 2, 2, 2, 183, 184, 3, 2, 2,
	2, 184, 60, 3, 2, 2, 2, 185, 183, 3, 2, 2, 2, 186, 187, 9, 3, 2, 2, 187,
	62, 3, 2, 2, 2, 188, 191, 9, 4, 2, 2, 189, 191, 5, 61, 31, 2, 190, 188,
	3, 2, 2, 2, 190, 189, 3, 2, 2, 2, 191, 64, 3, 2, 2, 2, 192, 196, 5, 67,
	34, 2, 193, 195, 5, 69, 35, 2, 194, 193, 3, 2, 2, 2, 195, 198, 3, 2, 2,
	2, 196, 194, 3, 2, 2, 2, 196, 197, 3, 2, 2, 2, 197, 66, 3, 2, 2, 2, 198,
	196, 3, 2, 2, 2, 199, 200, 9, 5, 2, 2, 200, 68, 3, 2, 2, 2, 201, 202, 9,
	4, 2, 2, 202, 70, 3, 2, 2, 2, 203, 207, 7, 36, 2, 2, 204, 206, 11, 2, 2,
	2, 205, 204, 3, 2, 2, 2, 206, 209, 3, 2, 2, 2, 207, 208, 3, 2, 2, 2, 207,
	205, 3, 2, 2, 2, 208, 210, 3, 2, 2, 2, 209, 207, 3, 2, 2, 2, 210, 211,
	7, 36, 2, 2, 211, 72, 3, 2, 2, 2, 9, 2, 162, 172, 183, 190, 196, 207, 3,
	2, 3, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'import'", "'('", "')'", "'return'", "'loop'", "'{'", "'}'", "'match'",
	"'=>'", "','", "'='", "'@'", "'->'", "'impl'", "':'", "'+'", "'let'", "'mut'",
	"'fn'", "'type'", "'trait'", "'^'", "'*'", "'/'", "'-'", "'?'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "WS", "COMMENT", "ID", "NUM", "STRING",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
	"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24",
	"T__25", "WS", "COMMENT", "ID", "StartLetter", "Letter", "NUM", "StartDigit",
	"Digit", "STRING",
}

type ElzLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewElzLexer(input antlr.CharStream) *ElzLexer {

	l := new(ElzLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Elz.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ElzLexer tokens.
const (
	ElzLexerT__0    = 1
	ElzLexerT__1    = 2
	ElzLexerT__2    = 3
	ElzLexerT__3    = 4
	ElzLexerT__4    = 5
	ElzLexerT__5    = 6
	ElzLexerT__6    = 7
	ElzLexerT__7    = 8
	ElzLexerT__8    = 9
	ElzLexerT__9    = 10
	ElzLexerT__10   = 11
	ElzLexerT__11   = 12
	ElzLexerT__12   = 13
	ElzLexerT__13   = 14
	ElzLexerT__14   = 15
	ElzLexerT__15   = 16
	ElzLexerT__16   = 17
	ElzLexerT__17   = 18
	ElzLexerT__18   = 19
	ElzLexerT__19   = 20
	ElzLexerT__20   = 21
	ElzLexerT__21   = 22
	ElzLexerT__22   = 23
	ElzLexerT__23   = 24
	ElzLexerT__24   = 25
	ElzLexerT__25   = 26
	ElzLexerWS      = 27
	ElzLexerCOMMENT = 28
	ElzLexerID      = 29
	ElzLexerNUM     = 30
	ElzLexerSTRING  = 31
)

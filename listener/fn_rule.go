package listener

import (
	"github.com/elz-lang/elz/parser"
)

// EnterFnDefine listen FnDefine rule, when enter here, create a FnBuilder for following building routine
func (s *ElzListener) EnterFnDefine(ctx *parser.FnDefineContext) {
	s.fnBuilder = NewFnBuilder().
		Name(ctx.ID().GetText()).
		Export(s.exportThis)
}

// EnterParamType listen parameter's type, emit it to FnBuilder
func (s *ElzListener) EnterParamType(ctx *parser.ParamTypeContext) {
	s.fnBuilder.PushParamType(ctx.TypeForm().GetText())
}

// EnterParam listen parameter rule, emit name of parameter to FnBuilder
func (s *ElzListener) EnterParam(ctx *parser.ParamContext) {
	s.fnBuilder.PushParamName(ctx.ID().GetText())
}

// EnterReturnType listen return form in function rule, emit return type to FnBuilder
func (s *ElzListener) EnterReturnType(ctx *parser.ReturnTypeContext) {
	s.fnBuilder.RetType(ctx.TypeForm().GetText())
}

// ExitFnDefine listen exit signal of rule FnDefine, emit function generated by FnBuilder to AstList
func (s *ElzListener) ExitFnDefine(ctx *parser.FnDefineContext) {
	s.AstList = append(s.AstList,
		s.fnBuilder.generate(),
	)
	// Already leave function scope
	s.fnBuilder = nil
}
